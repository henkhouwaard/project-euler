--Each new term in the Fibonacci sequence is generated by adding
--the previous two terms. By starting with 1 and 2, the first 
--10 terms will be:

--1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

--By considering the terms in the Fibonacci sequence whose values
--do not exceed four million, find the sum of the even-valued terms.
import Test.HUnit

fibonacci = (map fib [0..])
    where
        fib 0 = 0
        fib 1 = 1
        fib 2 = 2
        fib x = fibonacci !! (x - 2) + fibonacci !! (x - 1)
evenfib = filter even fibonacci
problem = sum (takeWhile (< 4000000) evenfib)

test1 = TestCase (assertEqual "fibonacci 1," 1 (fibonacci !! 1))
test2 = TestCase (assertEqual "fibonacci 2," 2 (fibonacci !! 2))
test3 = TestCase (assertEqual "fibonacci 10," 89 (fibonacci !! 10))
test4 = TestCase (assertEqual "fibonacci 20," 10946 (fibonacci !! 20)) 
test5 = TestCase (assertEqual "fibonacci 0," 0 (fibonacci !! 0))
test6 = TestCase (assertEqual "problem," 4613732 (problem))

tests = TestList
    [TestLabel "test1" test1
    ,TestLabel "test2" test2
    ,TestLabel "test3" test3
    ,TestLabel "test4" test4
    ,TestLabel "test5" test5
    ,TestLabel "test6" test6]
